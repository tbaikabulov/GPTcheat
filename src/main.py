import sys
from PySide6.QtWidgets import (QApplication, QMainWindow, QWidget, QVBoxLayout, 
                              QPushButton, QLabel, QHBoxLayout, QTextEdit, QSplitter)
from PySide6.QtCore import Qt, QTimer, QThread, Signal
from PySide6.QtGui import QShortcut, QKeySequence
import threading
import time

from audio_recorder import AudioRecorder
from wave_visualizer import WaveVisualizer
from file_manager import FileManager
from functions import process_chat

class ChatProcessor(QThread):
    finished = Signal(dict)  # –°–∏–≥–Ω–∞–ª –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏
    
    def __init__(self, chat_id):
        super().__init__()
        self.chat_id = chat_id
        
    def run(self):
        try:
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —á–∞—Ç
            print(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —á–∞—Ç {self.chat_id}")
            raw_text, text, answer = process_chat(self.chat_id)
            if text:
                result = {
                    'text': text,
                    'answer': answer
                }
            else:
                result = {
                    'text': "–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ç–µ–∫—Å—Ç",
                    'answer': "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞"
                }
            
            self.finished.emit(result)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –≤ ChatProcessor: {str(e)}")
            self.finished.emit({
                'text': f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {str(e)}",
                'answer': "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç"
            })

class MainWindow(QMainWindow):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("GPTcheat - Interview Assistant")
        self.setGeometry(100, 100, 1200, 800)
        
        self.audio_recorder = AudioRecorder()
        self.file_manager = FileManager()
        self.chat_processor = None
        
        self.init_ui()
        self.setup_hotkeys()
        
        # –¢–∞–π–º–µ—Ä—ã
        self.update_timer = QTimer(self)
        self.update_timer.timeout.connect(self.update_visualization)
        self.update_timer.start(16)  # 60 FPS
        
        self.chunk_timer = QTimer(self)
        self.chunk_timer.timeout.connect(self.save_chunk)
        self.chunk_timer.start(10000)  # –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥
        
        self.process_timer = QTimer(self)
        self.process_timer.timeout.connect(self.process_chat)
        self.process_timer.start(10000)  # –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥
        
    def init_ui(self):
        central_widget = QWidget()
        self.setCentralWidget(central_widget)
        main_layout = QVBoxLayout(central_widget)
        main_layout.setSpacing(0)  # –£–±–∏—Ä–∞–µ–º –æ—Ç—Å—Ç—É–ø—ã –º–µ–∂–¥—É —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏
        
        # –°—Ç–∞—Ç—É—Å –∏ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è (20% –≤—ã—Å–æ—Ç—ã)
        top_widget = QWidget()
        top_widget.setFixedHeight(160)  # 20% –æ—Ç 800
        top_layout = QVBoxLayout(top_widget)
        top_layout.setContentsMargins(10, 10, 10, 10)  # –û—Ç—Å—Ç—É–ø—ã –≤–Ω—É—Ç—Ä–∏ –≤–µ—Ä—Ö–Ω–µ–≥–æ –±–ª–æ–∫–∞
        
        # –°—Ç–∞—Ç—É—Å –∏ –∫–Ω–æ–ø–∫–∞ –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É
        status_layout = QHBoxLayout()
        self.status_label = QLabel("–°—Ç–∞—Ç—É—Å: –û–∂–∏–¥–∞–Ω–∏–µ")
        self.status_label.setStyleSheet("QLabel { color: gray; }")
        status_layout.addWidget(self.status_label)
        
        self.record_btn = QPushButton("–ù–∞—á–∞—Ç—å –∑–∞–ø–∏—Å—å (Space)")
        self.record_btn.clicked.connect(self.toggle_recording)
        status_layout.addWidget(self.record_btn)
        top_layout.addLayout(status_layout)
        
        # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –≤–æ–ª–Ω
        self.wave_visualizer = WaveVisualizer()
        self.wave_visualizer.setFixedHeight(80)  # –£–º–µ–Ω—å—à–∞–µ–º –≤—ã—Å–æ—Ç—É –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
        top_layout.addWidget(self.wave_visualizer)
        
        main_layout.addWidget(top_widget)
        
        # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –¥–ª—è —Ç–µ–∫—Å—Ç–∞ –∏ –ø–æ–¥—Å–∫–∞–∑–æ–∫ (80% –≤—ã—Å–æ—Ç—ã)
        splitter = QSplitter(Qt.Horizontal)
        
        # –ë–ª–æ–∫ —Å —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º
        text_widget = QWidget()
        text_layout = QVBoxLayout(text_widget)
        text_layout.setContentsMargins(10, 10, 10, 10)
        text_label = QLabel("–†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:")
        text_layout.addWidget(text_label)
        
        self.text_edit = QTextEdit()
        self.text_edit.setReadOnly(True)
        self.text_edit.setPlaceholderText("–ó–¥–µ—Å—å –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç...")
        text_layout.addWidget(self.text_edit)
        
        # –ë–ª–æ–∫ —Å –ø–æ–¥—Å–∫–∞–∑–∫–∞–º–∏
        hints_widget = QWidget()
        hints_layout = QVBoxLayout(hints_widget)
        hints_layout.setContentsMargins(10, 10, 10, 10)
        hints_label = QLabel("–ü–æ–¥—Å–∫–∞–∑–∫–∏:")
        hints_layout.addWidget(hints_label)
        
        self.hints_edit = QTextEdit()
        self.hints_edit.setReadOnly(True)
        self.hints_edit.setPlaceholderText("–ó–¥–µ—Å—å –±—É–¥—É—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –ø–æ–¥—Å–∫–∞–∑–∫–∏...")
        hints_layout.addWidget(self.hints_edit)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤–∏–¥–∂–µ—Ç—ã –≤ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
        splitter.addWidget(text_widget)
        splitter.addWidget(hints_widget)
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã
        splitter.setSizes([600, 600])
        
        main_layout.addWidget(splitter)
        
    def setup_hotkeys(self):
        self.record_shortcut = QShortcut(QKeySequence(Qt.Key.Key_Space), self)
        self.record_shortcut.activated.connect(self.toggle_recording)
        
    def toggle_recording(self):
        if not self.audio_recorder.is_recording:
            self.start_recording()
        else:
            self.stop_recording()
            
    def start_recording(self):
        try:
            chat_dir = self.file_manager.create_chat_directory()
            print(f"–°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è –∑–∞–ø–∏—Å–∏: {chat_dir}")
            
            self.audio_recorder.start_recording()
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä—ã –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –∑–∞–ø–∏—Å–∏
            self.chunk_timer.start()
            self.process_timer.start()
            
            self.record_btn.setText("‚èπ –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–ø–∏—Å—å (Space)")
            self.status_label.setText("–ó–∞–ø–∏—Å—å...")
            self.status_label.setStyleSheet("QLabel { color: red; }")
            self.wave_visualizer.clear()
            
        except Exception as e:
            self.status_label.setText(f"–û—à–∏–±–∫–∞: {str(e)}")
            self.status_label.setStyleSheet("QLabel { color: red; }")
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∑–∞–ø–∏—Å–∏: {str(e)}")
    
    def stop_recording(self):
        if self.audio_recorder.is_recording:
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä—ã –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –∑–∞–ø–∏—Å–∏
            self.chunk_timer.stop()
            self.process_timer.stop()
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞–Ω–∫ –ø–µ—Ä–µ–¥ –æ—Å—Ç–∞–Ω–æ–≤–∫–æ–π
            chunk_data = self.audio_recorder.save_chunk()
            if chunk_data:
                filepath = self.file_manager.save_audio_chunk(chunk_data)
                print(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞–Ω–∫: {filepath}")
            
            self.audio_recorder.stop_recording()
            
            self.record_btn.setText("üé§ –ù–∞—á–∞—Ç—å –∑–∞–ø–∏—Å—å (Space)")
            self.status_label.setText("–ì–æ—Ç–æ–≤ –∫ –∑–∞–ø–∏—Å–∏")
            self.status_label.setStyleSheet("QLabel { color: gray; }")
            self.wave_visualizer.clear()
            
    def update_visualization(self):
        if self.audio_recorder.is_recording:
            level = self.audio_recorder.get_audio_level()
            self.wave_visualizer.update_level(level)
            
    def save_chunk(self):
        if self.audio_recorder.is_recording:
            chunk_data = self.audio_recorder.save_chunk()
            if chunk_data:
                filepath = self.file_manager.save_audio_chunk(chunk_data)
                print(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω —á–∞–Ω–∫: {filepath}")
            
    def process_chat(self):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —á–∞—Ç–∞"""
        if self.audio_recorder.is_recording and self.file_manager.current_chat:
            # –ï—Å–ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –≤—Å–µ –µ—â–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –Ω–µ –∑–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—ã–π
            if self.chat_processor and self.chat_processor.isRunning():
                print("–ü—Ä–µ–¥—ã–¥—É—â–∏–π –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –≤—Å–µ –µ—â–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º...")
                return
                
            # –ü–æ–ª—É—á–∞–µ–º ID —Ç–µ–∫—É—â–µ–≥–æ —á–∞—Ç–∞
            chat_id = int(self.file_manager.current_chat.split('_')[1])
            
            # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            self.chat_processor = ChatProcessor(chat_id)
            self.chat_processor.finished.connect(self.on_chat_processed)
            self.chat_processor.start()
            
    def on_chat_processed(self, result):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —á–∞—Ç–∞"""
        try:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –ø–æ–ª—è
            if result.get('text'):
                self.text_edit.setText(result['text'])
            if result.get('answer'):
                self.hints_edit.setText(result['answer'])
            
            # –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –∫ –Ω–∞—á–∞–ª—É
            self.text_edit.verticalScrollBar().setValue(0)
            self.hints_edit.verticalScrollBar().setValue(0)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞: {str(e)}")
    
    def closeEvent(self, event):
        self.stop_recording()
        event.accept()

if __name__ == '__main__':
    # –ø–æ–¥—Ä–æ–±–Ω—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø–æ –∫–æ–¥—É:
    # 1. –º—ã —Å–æ–∑–¥–∞–µ–º –æ–∫–Ω–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    # 2. –º—ã —Å–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∞—Å—Å–∞ AudioRecorder –¥–ª—è –∑–∞–ø–∏—Å–∏ –∞—É–¥–∏–æ
    # 3. –º—ã —Å–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∞—Å—Å–∞ FileManager –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞–º–∏
    # 4. –º—ã —Å–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∞—Å—Å–∞ ChatProcessor –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —á–∞—Ç–∞
    # 5. –º—ã —Å–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∞—Å—Å–∞ MainWindow –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ–∫–Ω–∞
    # 6. –º—ã —Å–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∞—Å—Å–∞ QApplication –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    app = QApplication(sys.argv)

    window = MainWindow()
    window.show()
    sys.exit(app.exec()) 


# command to run: python src/main.py