import sys
from PySide6.QtWidgets import (QApplication, QMainWindow, QWidget, QVBoxLayout, 
                              QPushButton, QLabel, QHBoxLayout, QTextEdit, QSplitter)
from PySide6.QtCore import Qt, QTimer
from PySide6.QtGui import QShortcut, QKeySequence

from audio_recorder import AudioRecorder
from wave_visualizer import WaveVisualizer
from file_manager import FileManager

class MainWindow(QMainWindow):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("GPTcheat - Interview Assistant")
        self.setGeometry(100, 100, 1200, 800)
        
        self.audio_recorder = AudioRecorder()
        self.file_manager = FileManager()
        
        self.init_ui()
        self.setup_hotkeys()
        
        # –¢–∞–π–º–µ—Ä—ã
        self.update_timer = QTimer(self)
        self.update_timer.timeout.connect(self.update_visualization)
        self.update_timer.start(16)  # 60 FPS
        
        self.chunk_timer = QTimer(self)
        self.chunk_timer.timeout.connect(self.save_chunk)
        self.chunk_timer.start(10000)  # –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥
        
    def init_ui(self):
        central_widget = QWidget()
        self.setCentralWidget(central_widget)
        main_layout = QVBoxLayout(central_widget)
        main_layout.setSpacing(0)  # –£–±–∏—Ä–∞–µ–º –æ—Ç—Å—Ç—É–ø—ã –º–µ–∂–¥—É —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏
        
        # –°—Ç–∞—Ç—É—Å –∏ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è (20% –≤—ã—Å–æ—Ç—ã)
        top_widget = QWidget()
        top_widget.setFixedHeight(160)  # 20% –æ—Ç 800
        top_layout = QVBoxLayout(top_widget)
        top_layout.setContentsMargins(10, 10, 10, 10)  # –û—Ç—Å—Ç—É–ø—ã –≤–Ω—É—Ç—Ä–∏ –≤–µ—Ä—Ö–Ω–µ–≥–æ –±–ª–æ–∫–∞
        
        # –°—Ç–∞—Ç—É—Å –∏ –∫–Ω–æ–ø–∫–∞ –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É
        status_layout = QHBoxLayout()
        self.status_label = QLabel("–°—Ç–∞—Ç—É—Å: –û–∂–∏–¥–∞–Ω–∏–µ")
        self.status_label.setStyleSheet("QLabel { color: gray; }")
        status_layout.addWidget(self.status_label)
        
        self.record_btn = QPushButton("–ù–∞—á–∞—Ç—å –∑–∞–ø–∏—Å—å (Space)")
        self.record_btn.clicked.connect(self.toggle_recording)
        status_layout.addWidget(self.record_btn)
        top_layout.addLayout(status_layout)
        
        # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –≤–æ–ª–Ω
        self.wave_visualizer = WaveVisualizer()
        self.wave_visualizer.setFixedHeight(80)  # –£–º–µ–Ω—å—à–∞–µ–º –≤—ã—Å–æ—Ç—É –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
        top_layout.addWidget(self.wave_visualizer)
        
        main_layout.addWidget(top_widget)
        
        # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –¥–ª—è —Ç–µ–∫—Å—Ç–∞ –∏ –ø–æ–¥—Å–∫–∞–∑–æ–∫ (80% –≤—ã—Å–æ—Ç—ã)
        splitter = QSplitter(Qt.Horizontal)
        
        # –ë–ª–æ–∫ —Å —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º
        text_widget = QWidget()
        text_layout = QVBoxLayout(text_widget)
        text_layout.setContentsMargins(10, 10, 10, 10)
        text_label = QLabel("–†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:")
        text_layout.addWidget(text_label)
        
        self.text_edit = QTextEdit()
        self.text_edit.setReadOnly(True)
        self.text_edit.setPlaceholderText("–ó–¥–µ—Å—å –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç...")
        text_layout.addWidget(self.text_edit)
        
        # –ë–ª–æ–∫ —Å –ø–æ–¥—Å–∫–∞–∑–∫–∞–º–∏
        hints_widget = QWidget()
        hints_layout = QVBoxLayout(hints_widget)
        hints_layout.setContentsMargins(10, 10, 10, 10)
        hints_label = QLabel("–ü–æ–¥—Å–∫–∞–∑–∫–∏:")
        hints_layout.addWidget(hints_label)
        
        self.hints_edit = QTextEdit()
        self.hints_edit.setReadOnly(True)
        self.hints_edit.setPlaceholderText("–ó–¥–µ—Å—å –±—É–¥—É—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –ø–æ–¥—Å–∫–∞–∑–∫–∏...")
        hints_layout.addWidget(self.hints_edit)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤–∏–¥–∂–µ—Ç—ã –≤ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
        splitter.addWidget(text_widget)
        splitter.addWidget(hints_widget)
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã
        splitter.setSizes([600, 600])
        
        main_layout.addWidget(splitter)
        
    def setup_hotkeys(self):
        self.record_shortcut = QShortcut(QKeySequence(Qt.Key.Key_Space), self)
        self.record_shortcut.activated.connect(self.toggle_recording)
        
    def toggle_recording(self):
        if not self.audio_recorder.is_recording:
            self.start_recording()
        else:
            self.stop_recording()
            
    def start_recording(self):
        try:
            chat_dir = self.file_manager.create_chat_directory()
            print(f"–°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è –∑–∞–ø–∏—Å–∏: {chat_dir}")
            
            self.audio_recorder.start_recording()
            
            self.record_btn.setText("‚èπ –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–ø–∏—Å—å (Space)")
            self.status_label.setText("–ó–∞–ø–∏—Å—å...")
            self.status_label.setStyleSheet("QLabel { color: red; }")
            self.wave_visualizer.clear()
            
        except Exception as e:
            self.status_label.setText(f"–û—à–∏–±–∫–∞: {str(e)}")
            self.status_label.setStyleSheet("QLabel { color: red; }")
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∑–∞–ø–∏—Å–∏: {str(e)}")
    
    def stop_recording(self):
        if self.audio_recorder.is_recording:
            self.audio_recorder.stop_recording()
            
            self.record_btn.setText("üé§ –ù–∞—á–∞—Ç—å –∑–∞–ø–∏—Å—å (Space)")
            self.status_label.setText("–ì–æ—Ç–æ–≤ –∫ –∑–∞–ø–∏—Å–∏")
            self.status_label.setStyleSheet("QLabel { color: gray; }")
            self.wave_visualizer.clear()
            
    def update_visualization(self):
        if self.audio_recorder.is_recording:
            level = self.audio_recorder.get_audio_level()
            self.wave_visualizer.update_level(level)
            
    def save_chunk(self):
        if self.audio_recorder.is_recording:
            chunk_data = self.audio_recorder.save_chunk()
            if chunk_data:
                filepath = self.file_manager.save_audio_chunk(chunk_data)
                print(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω —á–∞–Ω–∫: {filepath}")
            
    def closeEvent(self, event):
        self.stop_recording()
        event.accept()

if __name__ == '__main__':
    app = QApplication(sys.argv)
    window = MainWindow()
    window.show()
    sys.exit(app.exec()) 